/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.acme.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MyClass extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7154626823671201052L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyClass\",\"namespace\":\"com.acme.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"isDeveloper\",\"type\":\"boolean\"},{\"name\":\"salary\",\"type\":\"float\"},{\"name\":\"friends\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"relatives\",\"type\":{\"type\":\"record\",\"name\":\"relatives\",\"fields\":[{\"name\":\"Asya\",\"type\":\"int\"},{\"name\":\"Farkhat\",\"type\":\"int\"},{\"name\":\"Ruslan\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyClass> ENCODER =
      new BinaryMessageEncoder<MyClass>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyClass> DECODER =
      new BinaryMessageDecoder<MyClass>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MyClass> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MyClass> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MyClass> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyClass>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MyClass to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MyClass from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MyClass instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MyClass fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence name;
  private java.lang.CharSequence email;
  private int age;
  private boolean isDeveloper;
  private float salary;
  private java.util.List<java.lang.CharSequence> friends;
  private com.acme.avro.relatives relatives;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyClass() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param email The new value for email
   * @param age The new value for age
   * @param isDeveloper The new value for isDeveloper
   * @param salary The new value for salary
   * @param friends The new value for friends
   * @param relatives The new value for relatives
   */
  public MyClass(java.lang.CharSequence name, java.lang.CharSequence email, java.lang.Integer age, java.lang.Boolean isDeveloper, java.lang.Float salary, java.util.List<java.lang.CharSequence> friends, com.acme.avro.relatives relatives) {
    this.name = name;
    this.email = email;
    this.age = age;
    this.isDeveloper = isDeveloper;
    this.salary = salary;
    this.friends = friends;
    this.relatives = relatives;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return email;
    case 2: return age;
    case 3: return isDeveloper;
    case 4: return salary;
    case 5: return friends;
    case 6: return relatives;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: email = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    case 3: isDeveloper = (java.lang.Boolean)value$; break;
    case 4: salary = (java.lang.Float)value$; break;
    case 5: friends = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: relatives = (com.acme.avro.relatives)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'isDeveloper' field.
   * @return The value of the 'isDeveloper' field.
   */
  public boolean getIsDeveloper() {
    return isDeveloper;
  }


  /**
   * Sets the value of the 'isDeveloper' field.
   * @param value the value to set.
   */
  public void setIsDeveloper(boolean value) {
    this.isDeveloper = value;
  }

  /**
   * Gets the value of the 'salary' field.
   * @return The value of the 'salary' field.
   */
  public float getSalary() {
    return salary;
  }


  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(float value) {
    this.salary = value;
  }

  /**
   * Gets the value of the 'friends' field.
   * @return The value of the 'friends' field.
   */
  public java.util.List<java.lang.CharSequence> getFriends() {
    return friends;
  }


  /**
   * Sets the value of the 'friends' field.
   * @param value the value to set.
   */
  public void setFriends(java.util.List<java.lang.CharSequence> value) {
    this.friends = value;
  }

  /**
   * Gets the value of the 'relatives' field.
   * @return The value of the 'relatives' field.
   */
  public com.acme.avro.relatives getRelatives() {
    return relatives;
  }


  /**
   * Sets the value of the 'relatives' field.
   * @param value the value to set.
   */
  public void setRelatives(com.acme.avro.relatives value) {
    this.relatives = value;
  }

  /**
   * Creates a new MyClass RecordBuilder.
   * @return A new MyClass RecordBuilder
   */
  public static com.acme.avro.MyClass.Builder newBuilder() {
    return new com.acme.avro.MyClass.Builder();
  }

  /**
   * Creates a new MyClass RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyClass RecordBuilder
   */
  public static com.acme.avro.MyClass.Builder newBuilder(com.acme.avro.MyClass.Builder other) {
    if (other == null) {
      return new com.acme.avro.MyClass.Builder();
    } else {
      return new com.acme.avro.MyClass.Builder(other);
    }
  }

  /**
   * Creates a new MyClass RecordBuilder by copying an existing MyClass instance.
   * @param other The existing instance to copy.
   * @return A new MyClass RecordBuilder
   */
  public static com.acme.avro.MyClass.Builder newBuilder(com.acme.avro.MyClass other) {
    if (other == null) {
      return new com.acme.avro.MyClass.Builder();
    } else {
      return new com.acme.avro.MyClass.Builder(other);
    }
  }

  /**
   * RecordBuilder for MyClass instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyClass>
    implements org.apache.avro.data.RecordBuilder<MyClass> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence email;
    private int age;
    private boolean isDeveloper;
    private float salary;
    private java.util.List<java.lang.CharSequence> friends;
    private com.acme.avro.relatives relatives;
    private com.acme.avro.relatives.Builder relativesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.acme.avro.MyClass.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.isDeveloper)) {
        this.isDeveloper = data().deepCopy(fields()[3].schema(), other.isDeveloper);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.friends)) {
        this.friends = data().deepCopy(fields()[5].schema(), other.friends);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.relatives)) {
        this.relatives = data().deepCopy(fields()[6].schema(), other.relatives);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasRelativesBuilder()) {
        this.relativesBuilder = com.acme.avro.relatives.newBuilder(other.getRelativesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MyClass instance
     * @param other The existing instance to copy.
     */
    private Builder(com.acme.avro.MyClass other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isDeveloper)) {
        this.isDeveloper = data().deepCopy(fields()[3].schema(), other.isDeveloper);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.friends)) {
        this.friends = data().deepCopy(fields()[5].schema(), other.friends);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.relatives)) {
        this.relatives = data().deepCopy(fields()[6].schema(), other.relatives);
        fieldSetFlags()[6] = true;
      }
      this.relativesBuilder = null;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isDeveloper' field.
      * @return The value.
      */
    public boolean getIsDeveloper() {
      return isDeveloper;
    }


    /**
      * Sets the value of the 'isDeveloper' field.
      * @param value The value of 'isDeveloper'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setIsDeveloper(boolean value) {
      validate(fields()[3], value);
      this.isDeveloper = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isDeveloper' field has been set.
      * @return True if the 'isDeveloper' field has been set, false otherwise.
      */
    public boolean hasIsDeveloper() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isDeveloper' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearIsDeveloper() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * @return The value.
      */
    public float getSalary() {
      return salary;
    }


    /**
      * Sets the value of the 'salary' field.
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setSalary(float value) {
      validate(fields()[4], value);
      this.salary = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'salary' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearSalary() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'friends' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getFriends() {
      return friends;
    }


    /**
      * Sets the value of the 'friends' field.
      * @param value The value of 'friends'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setFriends(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.friends = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'friends' field has been set.
      * @return True if the 'friends' field has been set, false otherwise.
      */
    public boolean hasFriends() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'friends' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearFriends() {
      friends = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'relatives' field.
      * @return The value.
      */
    public com.acme.avro.relatives getRelatives() {
      return relatives;
    }


    /**
      * Sets the value of the 'relatives' field.
      * @param value The value of 'relatives'.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder setRelatives(com.acme.avro.relatives value) {
      validate(fields()[6], value);
      this.relativesBuilder = null;
      this.relatives = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'relatives' field has been set.
      * @return True if the 'relatives' field has been set, false otherwise.
      */
    public boolean hasRelatives() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'relatives' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.relatives.Builder getRelativesBuilder() {
      if (relativesBuilder == null) {
        if (hasRelatives()) {
          setRelativesBuilder(com.acme.avro.relatives.newBuilder(relatives));
        } else {
          setRelativesBuilder(com.acme.avro.relatives.newBuilder());
        }
      }
      return relativesBuilder;
    }

    /**
     * Sets the Builder instance for the 'relatives' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.acme.avro.MyClass.Builder setRelativesBuilder(com.acme.avro.relatives.Builder value) {
      clearRelatives();
      relativesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'relatives' field has an active Builder instance
     * @return True if the 'relatives' field has an active Builder instance
     */
    public boolean hasRelativesBuilder() {
      return relativesBuilder != null;
    }

    /**
      * Clears the value of the 'relatives' field.
      * @return This builder.
      */
    public com.acme.avro.MyClass.Builder clearRelatives() {
      relatives = null;
      relativesBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyClass build() {
      try {
        MyClass record = new MyClass();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        record.isDeveloper = fieldSetFlags()[3] ? this.isDeveloper : (java.lang.Boolean) defaultValue(fields()[3]);
        record.salary = fieldSetFlags()[4] ? this.salary : (java.lang.Float) defaultValue(fields()[4]);
        record.friends = fieldSetFlags()[5] ? this.friends : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        if (relativesBuilder != null) {
          try {
            record.relatives = this.relativesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("relatives"));
            throw e;
          }
        } else {
          record.relatives = fieldSetFlags()[6] ? this.relatives : (com.acme.avro.relatives) defaultValue(fields()[6]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyClass>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyClass>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyClass>
    READER$ = (org.apache.avro.io.DatumReader<MyClass>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.email);

    out.writeInt(this.age);

    out.writeBoolean(this.isDeveloper);

    out.writeFloat(this.salary);

    long size0 = this.friends.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.friends) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.relatives.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.age = in.readInt();

      this.isDeveloper = in.readBoolean();

      this.salary = in.readFloat();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.friends;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("friends").schema());
        this.friends = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      if (this.relatives == null) {
        this.relatives = new com.acme.avro.relatives();
      }
      this.relatives.customDecode(in);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 2:
          this.age = in.readInt();
          break;

        case 3:
          this.isDeveloper = in.readBoolean();
          break;

        case 4:
          this.salary = in.readFloat();
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.friends;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("friends").schema());
            this.friends = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 6:
          if (this.relatives == null) {
            this.relatives = new com.acme.avro.relatives();
          }
          this.relatives.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










